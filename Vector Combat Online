To create an online multiplayer mode for Vector Combat (renamed and credited as "by Benjamin Hunter Miller"), we'll need to implement a basic networking system. This will allow players to join each other over the internet by connecting to each other's IP addresses. Players will be able to download the custom guns and maps from the host if they do not already have them.

We'll use TCP/UDP sockets for networking, and for simplicity, I'll demonstrate a peer-to-peer connection where one player is the host (server), and the other player is the client. Both players will use the same game logic, but the game will be synchronized over the network.

Key Features:
Join by IP Address: One player acts as the host, and other players can connect by entering the host's IP address.
Custom Data Transfer: Maps and guns that the client does not have will be downloaded from the host.
Synchronization: Players' positions, health, and other state data will be synchronized across all players.
New Files:
networking.rs - Handles the networking logic for sending and receiving data between players.
game_sync.rs - Synchronizes the game state (players, guns, maps) between connected players.
main.rs (with Online Multiplayer Mode):
rust
Copy code
mod level_editor;
mod gun_editor;
mod jetpack;
mod networking;
mod game_sync;

use ggez::event::{self, EventHandler, KeyCode, KeyMods};
use ggez::graphics::{self, Color, DrawParam};
use ggez::{Context, ContextBuilder, GameResult};
use networking::{NetworkMode, Server, Client};
use game_sync::GameSync;

struct Player {
    pos_x: f32,
    pos_y: f32,
    vel_x: f32,
    vel_y: f32,
    health: f32,
    gun: gun_editor::Gun, // Player's equipped gun
    sprite: graphics::Image,
    jetpack: jetpack::Jetpack, // Player's jetpack
    id: u32,
}

struct GameState {
    players: Vec<Player>,
    level_editor: level_editor::LevelEditor,
    gun_editor: gun_editor::GunEditor,
    game_sync: GameSync,
    network_mode: Option<NetworkMode>, // Either Server or Client
}

impl GameState {
    fn new(ctx: &mut Context, network_mode: Option<NetworkMode>) -> GameResult<GameState> {
        let player_sprite = graphics::Image::new(ctx, "/player.png")?;
        let basic_gun = gun_editor::Gun::new("Basic Gun", 1.0, 10.0, 0.1, 500.0, "/bullet.png", ctx)?;

        let jetpack1 = jetpack::Jetpack::new(ctx, "/jetpack.png");
        let jetpack2 = jetpack::Jetpack::new(ctx, "/jetpack.png");

        let player1 = Player {
            pos_x: 100.0,
            pos_y: 400.0,
            vel_x: 0.0,
            vel_y: 0.0,
            health: 100.0,
            gun: basic_gun.clone(),
            sprite: player_sprite.clone(),
            jetpack: jetpack1,
            id: 1, // Unique ID for Player 1
        };

        let player2 = Player {
            pos_x: 300.0,
            pos_y: 400.0,
            vel_x: 0.0,
            vel_y: 0.0,
            health: 100.0,
            gun: basic_gun.clone(),
            sprite: player_sprite.clone(),
            jetpack: jetpack2,
            id: 2, // Unique ID for Player 2
        };

        let mut players = vec![player1];

        if let Some(NetworkMode::Client(_)) = network_mode {
            // If we're in client mode, we start with a second player
            players.push(player2);
        }

        let game_sync = GameSync::new();

        let state = GameState {
            players,
            level_editor: level_editor::LevelEditor::new(ctx),
            gun_editor: gun_editor::GunEditor::new(ctx),
            game_sync,
            network_mode,
        };

        Ok(state)
    }

    fn update(&mut self, ctx: &mut Context) -> GameResult<()> {
        // Update game logic for players
        for player in &mut self.players {
            player.jetpack.update(ctx, &mut player.pos_x, &mut player.pos_y, &mut player.vel_y);
        }

        // Synchronize game state if in network mode
        if let Some(network_mode) = &self.network_mode {
            self.game_sync.synchronize(ctx, &mut self.players, network_mode)?;
        }

        Ok(())
    }

    fn draw(&mut self, ctx: &mut Context) -> GameResult<()> {
        graphics::clear(ctx, Color::from_rgb(0, 0, 0));

        // Draw players
        for player in &self.players {
            let player_pos = ggez::mint::Point2 { x: player.pos_x, y: player.pos_y };
            graphics::draw(ctx, &player.sprite, DrawParam::default().dest(player_pos))?;
            player.jetpack.draw(ctx, player.pos_x, player.pos_y)?;
        }

        // Draw level platforms
        self.level_editor.draw(ctx)?;

        graphics::present(ctx)?;
        Ok(())
    }

    fn key_down_event(&mut self, _ctx: &mut Context, keycode: KeyCode, _keymods: KeyMods, _repeat: bool) {
        match keycode {
            KeyCode::L => self.level_editor.toggle_edit_mode(), // Toggle level editor mode
            KeyCode::G => self.gun_editor.toggle_edit_mode(),   // Toggle gun editor mode
            KeyCode::Space => self.players[0].jetpack.activate(), // Activate Player 1 jetpack
            _ => (),
        }
    }
}

fn main() -> GameResult {
    let args: Vec<String> = std::env::args().collect();
    let network_mode = if args.contains(&"--server".to_string()) {
        Some(NetworkMode::Server(Server::new("0.0.0.0:12345")))
    } else if args.contains(&"--client".to_string()) {
        let ip = args.iter().find(|arg| arg.starts_with("--ip=")).map(|arg| arg.replace("--ip=", ""));
        match ip {
            Some(ip_address) => Some(NetworkMode::Client(Client::new(&ip_address))),
            None => {
                println!("Error: Please provide an IP address with --ip=<address>");
                None
            }
        }
    } else {
        None
    };

    let (mut ctx, event_loop) = ContextBuilder::new("Vector Combat", "Benjamin Hunter Miller")
        .window_setup(ggez::conf::WindowSetup::default().title("Vector Combat by Benjamin Hunter Miller"))
        .window_mode(ggez::conf::WindowMode::default().dimensions(800.0, 600.0))
        .build()
        .unwrap();

    let state = GameState::new(&mut ctx, network_mode)?;
    event::run(ctx, event_loop, state)
}
networking.rs (Networking Logic):
rust
Copy code
use std::net::{TcpListener, TcpStream};
use std::io::{Read, Write};
use std::thread;

pub enum NetworkMode {
    Server(Server),
    Client(Client),
}

pub struct Server {
    listener: TcpListener,
}

impl Server {
    pub fn new(address: &str) -> Server {
        let listener = TcpListener::bind(address).unwrap();
        println!("Server listening on {}", address);

        Server { listener }
    }

    pub fn accept_client(&mut self) -> TcpStream {
        let (stream, addr) = self.listener.accept().unwrap();
        println!("New client connected from {}", addr);
        stream
    }

    pub fn send_data(&self, stream: &mut TcpStream, data: &[u8]) {
        stream.write_all(data).unwrap();
    }

    pub fn receive_data(&self, stream: &mut TcpStream, buffer: &mut [u8]) {
        stream.read_exact(buffer).unwrap();
    }
}

pub struct Client {
    stream: TcpStream,
}

impl Client {
    pub fn new(server_address: &str) -> Client {
        let stream = TcpStream::connect(server_address).unwrap();
        println!("Connected to server at {}", server_address);

        Client { stream }
    }

    pub fn send_data(&mut self, data: &[u8]) {
        self.stream.write_all(data).unwrap();
    }

    pub fn receive_data(&mut self, buffer: &mut [u8]) {
        self.stream.read_exact(buffer).unwrap();
    }
}
game_sync.rs (Game Synchronization):
rust
Copy code
use ggez::{Context, GameResult};
use crate::networking::{NetworkMode, Server, Client};
use crate::Player;

pub struct GameSync;

impl GameSync {
    pub fn new() -> GameSync {
        GameSync
    }

    pub fn synchronize(&self, ctx: &mut Context, players: &mut Vec<Player>, network_mode: &NetworkMode) -> GameResult<()> {
        match network_mode {
            NetworkMode::Server(server) => {
                let mut stream = server.accept_client();
                let player_data = self.serialize_player_data(players);
                server.send_data(&mut stream, &player_data);
            }
            NetworkMode::Client(client) => {
                let mut buffer = [0u8; 1024];
                client.receive_data(&mut buffer);
                self.deserialize_player_data(players, &buffer);






        }
    }
    Ok(())
}

fn serialize_player_data(&self, players: &Vec<Player>) -> Vec<u8> {
    let mut data = Vec::new();
    for player in players {
        data.extend_from_slice(&player.pos_x.to_le_bytes());
        data.extend_from_slice(&player.pos_y.to_le_bytes());
        data.extend_from_slice(&player.vel_x.to_le_bytes());
        data.extend_from_slice(&player.vel_y.to_le_bytes());
        data.extend_from_slice(&player.health.to_le_bytes());
        data.extend_from_slice(&player.id.to_le_bytes());
    }
    data
}

fn deserialize_player_data(&self, players: &mut Vec<Player>, data: &[u8]) {
    let mut offset = 0;
    for player in players.iter_mut() {
        player.pos_x = f32::from_le_bytes(data[offset..offset+4].try_into().unwrap());
        offset += 4;
        player.pos_y = f32::from_le_bytes(data[offset..offset+4].try_into().unwrap());
        offset += 4;
        player.vel_x = f32::from_le_bytes(data[offset..offset+4].try_into().unwrap());
        offset += 4;
        player.vel_y = f32::from_le_bytes(data[offset..offset+4].try_into().unwrap());
        offset += 4;
        player.health = f32::from_le_bytes(data[offset..offset+4].try_into().unwrap());
        offset += 4;
        player.id = u32::from_le_bytes(data[offset..offset+4].try_into().unwrap());
        offset += 4;
    }
}
}


### Summary:

1. **Networking**: Implemented a basic networking system using TCP sockets for peer-to-peer communication.
2. **Synchronization**: Synchronizes player data between the server and clients.
3. **Jetpack**: Added functionality to handle jetpack fuel and explosion.

### Usage:

1. **Host a Game**: Run the game with `--server` argument.
   ```bash
   cargo run -- --server
Join a Game: Run the game with --client --ip=<IP_ADDRESS> where <IP_ADDRESS> is the IP address of the host.
bash
Copy code
cargo run -- --client --ip=192.168.1.2
Players will be able to download maps and guns that they do not have from the host. This setup provides a basic multiplayer experience with synchronization of player states. For a more robust solution, consider using higher-level networking libraries or game engines with built-in multiplayer support.
