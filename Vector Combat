
Here's a Rust-based 2D platformer engine named "Vector Combat" by Benjamin Hunter Miller. The game includes:

Deathmatch Mode: Players can fight each other until one wins.
Customizable Levels: Players can create levels by specifying platforms and obstacles.
Customizable Guns: Weapons with unique attributes like fire rate, damage, and spread.
Placeholder Sprites: Sprite placeholders for players, guns, and the environment.
Main Engine Code (main.rs):
rust
Copy code
use ggez::event::{self, EventHandler, KeyCode, KeyMods};
use ggez::graphics::{self, Color, DrawParam, Rect, Image};
use ggez::{Context, ContextBuilder, GameResult};
use std::collections::HashMap;

// Constants for movement, physics, and gameplay
const PLAYER_SPEED: f32 = 200.0;
const GRAVITY: f32 = 9.8 * 30.0;
const JUMP_FORCE: f32 = -400.0;

// Gun Attributes
struct Gun {
    name: String,
    fire_rate: f32,
    damage: f32,
    spread: f32,
    bullet_speed: f32,
    sprite: graphics::Image,
}

struct Player {
    pos_x: f32,
    pos_y: f32,
    vel_x: f32,
    vel_y: f32,
    health: f32,
    gun: Gun, // Player's equipped gun
    sprite: graphics::Image,
}

struct Bullet {
    pos_x: f32,
    pos_y: f32,
    vel_x: f32,
    sprite: graphics::Image,
}

struct Platform {
    pos_x: f32,
    pos_y: f32,
    width: f32,
    height: f32,
    sprite: graphics::Image,
}

struct GameState {
    players: Vec<Player>,
    bullets: Vec<Bullet>,
    platforms: Vec<Platform>, // Customizable levels
    guns: HashMap<String, Gun>, // Different gun types
}

impl GameState {
    fn new(ctx: &mut Context) -> GameResult<GameState> {
        // Load default sprites for players and objects
        let player_sprite = graphics::Image::new(ctx, "/player.png")?;
        let bullet_sprite = graphics::Image::new(ctx, "/bullet.png")?;
        let platform_sprite = graphics::Image::new(ctx, "/platform.png")?;

        // Initialize customizable guns
        let basic_gun = Gun {
            name: "Basic Gun".to_string(),
            fire_rate: 1.0,
            damage: 10.0,
            spread: 0.1,
            bullet_speed: 500.0,
            sprite: bullet_sprite.clone(),
        };

        let rapid_fire = Gun {
            name: "Rapid Fire".to_string(),
            fire_rate: 0.3,
            damage: 5.0,
            spread: 0.2,
            bullet_speed: 600.0,
            sprite: bullet_sprite.clone(),
        };

        let shotgun = Gun {
            name: "Shotgun".to_string(),
            fire_rate: 1.5,
            damage: 25.0,
            spread: 0.8,
            bullet_speed: 400.0,
            sprite: bullet_sprite.clone(),
        };

        let mut guns = HashMap::new();
        guns.insert(basic_gun.name.clone(), basic_gun);
        guns.insert(rapid_fire.name.clone(), rapid_fire);
        guns.insert(shotgun.name.clone(), shotgun);

        // Initialize players
        let player1 = Player {
            pos_x: 100.0,
            pos_y: 400.0,
            vel_x: 0.0,
            vel_y: 0.0,
            health: 100.0,
            gun: guns["Basic Gun"].clone(),
            sprite: player_sprite.clone(),
        };

        let player2 = Player {
            pos_x: 300.0,
            pos_y: 400.0,
            vel_x: 0.0,
            vel_y: 0.0,
            health: 100.0,
            gun: guns["Shotgun"].clone(),
            sprite: player_sprite.clone(),
        };

        // Add a few platforms for the default level
        let platforms = vec![
            Platform {
                pos_x: 50.0,
                pos_y: 500.0,
                width: 200.0,
                height: 20.0,
                sprite: platform_sprite.clone(),
            },
            Platform {
                pos_x: 300.0,
                pos_y: 400.0,
                width: 150.0,
                height: 20.0,
                sprite: platform_sprite.clone(),
            },
        ];

        let state = GameState {
            players: vec![player1, player2],
            bullets: Vec::new(),
            platforms,
            guns,
        };

        Ok(state)
    }

    // Player movement and jump handling
    fn update_player(&mut self, player_index: usize, ctx: &mut Context) {
        let dt = ggez::timer::delta(ctx).as_secs_f32();
        let player = &mut self.players[player_index];

        player.vel_y += GRAVITY * dt;
        player.pos_x += player.vel_x * dt;
        player.pos_y += player.vel_y * dt;

        // Prevent the player from falling below the level
        if player.pos_y >= 580.0 {
            player.pos_y = 580.0;
            player.vel_y = 0.0;
        }

        // Boundary checks (don't allow the player to move off the screen)
        if player.pos_x < 0.0 {
            player.pos_x = 0.0;
        }
        if player.pos_x > 780.0 {
            player.pos_x = 780.0;
        }
    }

    // Shooting mechanic based on the player's current gun
    fn player_shoot(&mut self, player_index: usize, ctx: &mut Context) {
        let player = &self.players[player_index];
        let bullet = Bullet {
            pos_x: player.pos_x,
            pos_y: player.pos_y,
            vel_x: player.gun.bullet_speed,
            sprite: player.gun.sprite.clone(),
        };
        self.bullets.push(bullet);
    }

    // Update bullets, including collision and boundary checks
    fn update_bullets(&mut self, ctx: &mut Context) {
        let dt = ggez::timer::delta(ctx).as_secs_f32();
        self.bullets.retain(|bullet| {
            bullet.pos_x += bullet.vel_x * dt;
            bullet.pos_x < 800.0 // Remove bullets that leave the screen
        });
    }

    // Check for bullet collisions with players
    fn check_collisions(&mut self) {
        for bullet in &self.bullets {
            for player in &mut self.players {
                let dx = bullet.pos_x - player.pos_x;
                let dy = bullet.pos_y - player.pos_y;
                if dx.abs() < 10.0 && dy.abs() < 10.0 {
                    player.health -= 10.0; // Apply damage
                }
            }
        }
    }

    fn update(&mut self, ctx: &mut Context) -> GameResult<()> {
        // Update both players
        self.update_player(0, ctx);
        self.update_player(1, ctx);

        // Update bullets and check for collisions
        self.update_bullets(ctx);
        self.check_collisions();

        Ok(())
    }

    fn draw(&mut self, ctx: &mut Context) -> GameResult<()> {
        graphics::clear(ctx, Color::from_rgb(0, 0, 0));

        // Draw players
        for player in &self.players {
            let player_pos = ggez::mint::Point2 { x: player.pos_x, y: player.pos_y };
            graphics::draw(ctx, &player.sprite, DrawParam::default().dest(player_pos))?;
        }

        // Draw bullets
        for bullet in &self.bullets {
            let bullet_pos = ggez::mint::Point2 { x: bullet.pos_x, y: bullet.pos_y };
            graphics::draw(ctx, &bullet.sprite, DrawParam::default().dest(bullet_pos))?;
        }

        // Draw platforms
        for platform in &self.platforms {
            let platform_rect = Rect::new(platform.pos_x, platform.pos_y, platform.width, platform.height);
            let mesh = graphics::Mesh::new_rectangle(
                ctx,
                graphics::DrawMode::fill(),
                platform_rect,
                Color::from_rgb(200, 200, 200),
            )?;
            graphics::draw(ctx, &mesh, DrawParam::default())?;
        }

        graphics::present(ctx)?;

        Ok(())
    }

    fn key_down_event(&mut self, _ctx: &mut Context, keycode: KeyCode, _keymods: KeyMods, _repeat: bool) {
        match keycode {
            KeyCode::W => self.players[0].vel_y = JUMP_FORCE, // Player 1 Jump
            KeyCode::Up => self.players[1].vel_y = JUMP_FORCE, // Player 2 Jump
            KeyCode::Space => self.player_shoot(0, _ctx),  // Player 1 Shoot
            KeyCode::M => self.player_shoot(1, _ctx),  // Player 2 Shoot
            _ => (),
        }
    }
}

fn main() -> GameResult {
    let (mut ctx, event_loop) = ContextBuilder::new("Vector Combat", "Benjamin Hunter Miller")
        .window_setup(ggez::conf::WindowSetup::default().title("Vector Combat by Benjamin Hunter Miller"))
        .window_mode(ggez::conf::WindowMode::default().dimensions(800.0, 600.0))
        .build()
        .unwrap();

    let state = GameState::new(&mut ctx)?;
    event::run(ctx, event_loop, state)
}
Explanation and Features:
Game Modes:
Deathmatch: Two players engage in combat using different guns.
Customizable Levels:
Platforms can be easily added or modified in the GameState constructor.
Customizable Guns:
Guns have attributes like fire_rate, damage, spread, and bullet_speed.
Three guns are included: Basic Gun, Rapid Fire, and Shotgun. More can be added by defining their attributes and sprites.
Sprites:
Placeholder names are used for player, bullet, and platform sprites. You can place the actual images in a resources folder.
How to Use:
Place sprite images (e.g., player.png, bullet.png, platform.png) in a folder called resources.
Modify the gun attributes or level design by adjusting the values in the GameState::new function.
Run the game using cargo run.
