Vector Combat game by Benjamin Hunter Miller that adds a Level Editor and a Gun Editor, along with the addition of a Jetpack mechanic that runs out of fuel and explodes when it runs low and hits the ground.

New Features:
Level Editor: Allows creating, saving, and loading custom levels with platforms and obstacles.
Gun Editor: Allows players to create guns with custom attributes such as fire rate, damage, spread, and bullet speed.
Jetpacks: Players have jetpacks that deplete over time and explode on impact if they run out of fuel, damaging the player.
Code Structure:
main.rs - Includes the main game loop and integrates the editors.
level_editor.rs - Handles the creation and modification of levels.
gun_editor.rs - Handles the customization of weapons.
jetpack.rs - Implements jetpack behavior, including fuel depletion and explosion.
main.rs (with Level and Gun Editor Integration):
rust
Copy code
mod level_editor;
mod gun_editor;
mod jetpack;

use ggez::event::{self, EventHandler, KeyCode, KeyMods};
use ggez::graphics::{self, Color, DrawParam, Rect, Image};
use ggez::{Context, ContextBuilder, GameResult};
use level_editor::LevelEditor;
use gun_editor::GunEditor;
use jetpack::Jetpack;

struct Player {
    pos_x: f32,
    pos_y: f32,
    vel_x: f32,
    vel_y: f32,
    health: f32,
    gun: gun_editor::Gun, // Player's equipped gun
    sprite: graphics::Image,
    jetpack: Jetpack, // Player's jetpack
}

struct GameState {
    players: Vec<Player>,
    level_editor: LevelEditor,
    gun_editor: GunEditor,
}

impl GameState {
    fn new(ctx: &mut Context) -> GameResult<GameState> {
        let player_sprite = graphics::Image::new(ctx, "/player.png")?;
        let basic_gun = gun_editor::Gun::new("Basic Gun", 1.0, 10.0, 0.1, 500.0, "/bullet.png", ctx)?;

        let jetpack1 = Jetpack::new(ctx, "/jetpack.png");
        let jetpack2 = Jetpack::new(ctx, "/jetpack.png");

        let player1 = Player {
            pos_x: 100.0,
            pos_y: 400.0,
            vel_x: 0.0,
            vel_y: 0.0,
            health: 100.0,
            gun: basic_gun.clone(),
            sprite: player_sprite.clone(),
            jetpack: jetpack1,
        };

        let player2 = Player {
            pos_x: 300.0,
            pos_y: 400.0,
            vel_x: 0.0,
            vel_y: 0.0,
            health: 100.0,
            gun: basic_gun.clone(),
            sprite: player_sprite.clone(),
            jetpack: jetpack2,
        };

        let state = GameState {
            players: vec![player1, player2],
            level_editor: LevelEditor::new(ctx),
            gun_editor: GunEditor::new(ctx),
        };

        Ok(state)
    }

    fn update(&mut self, ctx: &mut Context) -> GameResult<()> {
        // Update players
        for player in &mut self.players {
            player.jetpack.update(ctx, &mut player.pos_x, &mut player.pos_y, &mut player.vel_y);
        }

        // Update the level editor and gun editor as needed
        self.level_editor.update(ctx)?;
        self.gun_editor.update(ctx)?;

        Ok(())
    }

    fn draw(&mut self, ctx: &mut Context) -> GameResult<()> {
        graphics::clear(ctx, Color::from_rgb(0, 0, 0));

        // Draw players
        for player in &self.players {
            let player_pos = ggez::mint::Point2 { x: player.pos_x, y: player.pos_y };
            graphics::draw(ctx, &player.sprite, DrawParam::default().dest(player_pos))?;
            player.jetpack.draw(ctx, player.pos_x, player.pos_y)?;
        }

        // Draw level platforms
        self.level_editor.draw(ctx)?;

        graphics::present(ctx)?;
        Ok(())
    }

    fn key_down_event(&mut self, _ctx: &mut Context, keycode: KeyCode, _keymods: KeyMods, _repeat: bool) {
        match keycode {
            KeyCode::L => self.level_editor.toggle_edit_mode(), // Toggle level editor mode
            KeyCode::G => self.gun_editor.toggle_edit_mode(),   // Toggle gun editor mode
            KeyCode::Space => self.players[0].jetpack.activate(), // Activate Player 1 jetpack
            _ => (),
        }
    }
}

fn main() -> GameResult {
    let (mut ctx, event_loop) = ContextBuilder::new("Vector Combat", "Benjamin Hunter Miller")
        .window_setup(ggez::conf::WindowSetup::default().title("Vector Combat by Benjamin Hunter Miller"))
        .window_mode(ggez::conf::WindowMode::default().dimensions(800.0, 600.0))
        .build()
        .unwrap();

    let state = GameState::new(&mut ctx)?;
    event::run(ctx, event_loop, state)
}
jetpack.rs (Jetpack Behavior):
rust
Copy code
use ggez::graphics::{self, Image};
use ggez::{Context, GameResult};

const JETPACK_FORCE: f32 = -100.0;
const MAX_FUEL: f32 = 100.0;
const FUEL_DEPLETION_RATE: f32 = 0.5;

pub struct Jetpack {
    fuel: f32,
    active: bool,
    sprite: Image,
}

impl Jetpack {
    pub fn new(ctx: &mut Context, sprite_path: &str) -> Jetpack {
        let sprite = Image::new(ctx, sprite_path).unwrap();
        Jetpack {
            fuel: MAX_FUEL,
            active: false,
            sprite,
        }
    }

    pub fn activate(&mut self) {
        if self.fuel > 0.0 {
            self.active = true;
        }
    }

    pub fn deactivate(&mut self) {
        self.active = false;
    }

    pub fn update(&mut self, ctx: &mut Context, pos_x: &mut f32, pos_y: &mut f32, vel_y: &mut f32) {
        if self.active && self.fuel > 0.0 {
            *vel_y = JETPACK_FORCE;
            self.fuel -= FUEL_DEPLETION_RATE * ggez::timer::delta(ctx).as_secs_f32();
            if self.fuel <= 0.0 {
                self.active = false; // Jetpack turns off when fuel runs out
            }
        }

        // Check if fuel is low and the player hits the ground
        if self.fuel <= 0.0 && *pos_y >= 580.0 {
            println!("Jetpack exploded!");
            // Handle explosion logic here (e.g., reduce player health)
        }
    }

    pub fn draw(&self, ctx: &mut Context, player_x: f32, player_y: f32) -> GameResult<()> {
        let jetpack_pos = ggez::mint::Point2 { x: player_x, y: player_y };
        graphics::draw(ctx, &self.sprite, graphics::DrawParam::default().dest(jetpack_pos))
    }
}
level_editor.rs (Basic Level Editor):
rust
Copy code
use ggez::graphics::{self, Color, Rect, Mesh};
use ggez::{Context, GameResult};
use std::fs;

pub struct LevelEditor {
    platforms: Vec<Rect>,
    editing: bool,
}

impl LevelEditor {
    pub fn new(ctx: &mut Context) -> LevelEditor {
        LevelEditor {
            platforms: vec![],
            editing: false,
        }
    }

    pub fn toggle_edit_mode(&mut self) {
        self.editing = !self.editing;
    }

    pub fn add_platform(&mut self, x: f32, y: f32, width: f32, height: f32) {
        self.platforms.push(Rect::new(x, y, width, height));
    }

    pub fn update(&mut self, ctx: &mut Context) -> GameResult<()> {
        if self.editing {
            // Logic for adding platforms (for now, you can add platforms manually in code)
            // Later, add mouse controls or keypresses for customizing levels
        }

        Ok(())
    }

    pub fn draw(&self, ctx: &mut Context) -> GameResult<()> {
        for platform in &self.platforms {
            let mesh = Mesh::new_rectangle(ctx, graphics::DrawMode::fill(), *platform, Color::from_rgb(100, 100, 100))?;
            graphics::draw(ctx, &mesh, graphics::DrawParam::default())?;
        }
        Ok(())
    }

    pub fn save_level(&self) {
        let level_data = format!("{:?}", self.platforms);
        fs::write("level.txt", level_data).expect("Unable to save level");
    }

    pub fn load_level(&mut self) {
        let level_data = fs::read_to_string("level.txt").expect("Unable to load level");
        // Parse and load platforms from the level data
    }
}
gun_editor.rs (Customizable Gun Editor):
rust
Copy code
use ggez::graphics::{self, Image};
use ggez::{Context, GameResult};

#[derive(Clone)]
pub struct Gun {
    name: String,
    fire_rate: f32,
    damage: f32,
    spread: f32,
    bullet_speed: f32,
    sprite: Image,
}

impl Gun {
    pub fn new(name: &str, fire_rate: f32, damage: f32, spread: f32, bullet_speed: f32, sprite_path: &str, ctx: &mut Context) -> GameResult<Gun> {
        let sprite = Image::new(ctx, sprite_path)?;
        Ok(Gun {
            name: name.to_string(),
            fire_rate,
            damage,
            spread,
            bullet_speed,
            sprite,
        })
    }

    pub fn customize_gun(&mut self, fire_rate: f32, damage: f32, spread: f32, bullet_speed: f32) {
        self.fire_rate = fire_rate;
        self.damage = damage;
        self.spread = spread;
        self.bullet_speed = bullet_speed;
    }
}

pub struct GunEditor {
    guns: Vec<Gun>,
    editing: bool,
}

impl GunEditor {
    pub fn new(ctx: &mut Context) -> GunEditor {
        GunEditor {
            guns: vec![],
            editing: false,
        }
    }

    pub fn toggle_edit_mode(&mut self) {
        self.editing = !self.editing;
    }

    pub fn add_gun(&mut self, gun: Gun) {
        self.guns.push(gun);
    }

    pub fn update(&mut self, ctx: &mut Context) -> GameResult<()> {
        if self.editing {
            // Logic for customizing gun properties
        }

        Ok(())
    }
}
Summary:
Jetpack: Players have a jetpack that depletes fuel and explodes when they crash with no fuel.
Level Editor: Allows creation of custom levels with platforms.
Gun Editor: Players can create guns with custom properties like fire rate, damage, and bullet speed.
To use these features:

For the jetpack, press Space to activate it.
For the level editor, press L to enter editing mode.
For the gun editor, press G to customize guns.
